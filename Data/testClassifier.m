function [prPredict classErr confMatrix] = testClassifier(classifier,userInfo,testFeats,testTargets)

prSetup = userInfo.prSetup;                                             % Get local PR configuration
try 
    aceInit = userInfo.aceInit;                                           % Get ACE params
catch
    aceInit.NUM_CLASSES = length(userInfo.prSetup.prData);  
end

settings = userInfo.settings;
activeClasses = classifier.classNumbers;
activeChannels = classifier.activeChannels;

Data = prSetup.prData;

disp(['Testing Classifier: ' classifier.classifierType]);

switch classifier.classifierType
    
%% GMM Classifier
    case 'GMM'
        enframedFeats = classifier.gULDA'*testFeats;
        Prob_d = zeros(length(enframedFeats),length(classifier.classNumbers));
        try
            for iSample = 1:size(enframedFeats,2)
                for iClass=1:length(classifier.classNumbers)
                    Prob_d(iSample,iClass) = gmmprob(classifier.mix_d(classifier.classNumbers(iClass)),enframedFeats(:,iSample)');
                end
                norm_prob_d(iSample,:) = Prob_d(iSample,:);
                temp2 = Prob_d(iSample,:);
                temp2(Prob_d(iSample,:)==0)=[];
                temp2 = min(temp2);
                if isempty(temp2)
                    norm_prob_d(iSample,Prob_d(iSample,:) == 0) = 0.0001;
                else
                    norm_prob_d(iSample,Prob_d(iSample,:) == 0) = temp2;
                end
                norm_prob_d2(iSample,:) = log10(norm_prob_d(iSample,:))./log10(classifier.max(classifier.classNumbers));
                confidence(iSample,:) = exp(norm_prob_d2(iSample,:) - max(norm_prob_d2(iSample,:)))/sum(exp(norm_prob_d2(iSample,:) - max(norm_prob_d2(iSample,:))));
                tmp = find(confidence(iSample,:) == max(confidence(iSample,:)));
                gmmClass(iSample) = tmp(1);
            end
            prPredict = classifier.classNumbers(gmmClass)';                                                      % save vector of class predictions
        catch
            lasterr
        end
        
%% MBC Classifier
    case 'MBC'
        waitHandle = waitbar(0,'Calculating Decisions...');
        for iClass=1:length(activeClasses)           
            waitbar((iClass-1)/length(activeClasses),waitHandle,['Calculating Decisions for Class ' num2str(iClass) '...']);
            enframedClass = zeros(size(testTargets));
            enframedClass(testTargets==iClass) = 1;
            enframedClass(testTargets~=iClass) = 2;            
            uFeats = classifier.featFlip(iClass).*(classifier.gULDA{iClass}'*testFeats);
            mbcFeats{iClass} = uFeats;
            mbcTargets{iClass} = enframedClass;           
        end
        for iClass = 1:length(activeClasses)
            testDec(iClass,:) = mbcFeats{iClass} > classifier.thresh(iClass);
        end
        
        numActive = zeros(1,length(mbcTargets{1}));
        prPredict = zeros(1,length(mbcTargets{1}));
        
        for iFrame = 1:length(mbcTargets{1})
            numActive(iFrame) = sum(testDec(:,iFrame)==1);
            if testDec(end,iFrame) || numActive(iFrame) == 0    % If the no motion class, or no classes are active
                prPredict(iFrame) = aceInit.restClass;            % Then do nothing
            elseif numActive(iFrame) == 1                       % If only one class is active, select it
                prPredict(iFrame) = classifier.classNumbers(testDec(:,iFrame)==1);
            else                                                % If more than one class is active
                prPredict(iFrame) = aceInit.restClass;            % Do nothing to be safe
            end
        end
        prPredict = prPredict';        
        
%% Neural Network Classifier        
    case 'NN'
        enframedFeats = classifier.gULDA'*testFeats;
       
        output = zeros(length(testTargets),length(activeClasses)); % output matrix is generated by columns
        for i = 1:length(testTargets)
            output(i,testTargets(i)) = 1;
        end
        NNScore = sim(classifier.net,enframedFeats,[],[],output');
        [dum prMotion] = max(NNScore,[],1);      
        prPredict = classifier.classNumbers(prMotion)';
        
      
%% Multi-Class SVM Classifier
    case 'SVM'
        [ClassRate, DecisionValue, Ns, confMatrix, prPredict]= SVMTest(testFeats, testTargets',classifier.osu_svm.AlphaY,...
            classifier.osu_svm.SVs, classifier.osu_svm.Bias,classifier.osu_svm.Parameters, classifier.osu_svm.nSV, classifier.osu_svm.nLabel);
        prPredict = activeClasses(prPredict)';

%% One-Against-One Classifier
    case 'OVO'
        
        waitHandle = waitbar(0,'Calculating Decisions...');
        for iClass=1:length(activeClasses)
            waitbar((iClass-1)/length(activeClasses),waitHandle,['Calculating Decisions that Involved Class ' num2str(iClass) '...']);
            for jClass= iClass+1:length(activeClasses)
               
                uFeats = classifier.featFlip(iClass,jClass).*(classifier.gULDA{iClass,jClass}'*testFeats);               
                iStds = abs(uFeats - classifier.stats(iClass,jClass).iMean)/classifier.stats(iClass,jClass).iStd;
                jStds = abs(uFeats - classifier.stats(iClass,jClass).jMean)/classifier.stats(iClass,jClass).jStd;
                
                if classifier.stdThreshMatrix(iClass,jClass)
                    classifier.testDec{iClass,jClass} = (iStds < jStds) & (iStds < classifier.stdThreshMatrix(iClass,jClass));
                else
                    classifier.testDec{iClass,jClass} = iStds < jStds;
                end
                
                if classifier.stdThreshMatrix(jClass,iClass)
                    classifier.testDec{jClass,iClass} = (jStds < iStds) & (jStds < classifier.stdThreshMatrix(jClass,iClass));
                else
                    classifier.testDec{jClass,iClass} = jStds < iStds;
                end
                
                for iFrame = 1:size(testFeats,2)
                    classDec{iFrame}(iClass,jClass) = classifier.testDec{iClass,jClass}(iFrame);
                    classDec{iFrame}(jClass,iClass) = classifier.testDec{jClass,iClass}(iFrame);
                end
            end
        end
        try close(waitHandle); catch end

        numDec = zeros(1,size(testFeats,2));
        prPredict = zeros(1,size(testFeats,2));
        for iFrame = 1:size(testFeats,2)   
            [numDec(iFrame) prPredict(iFrame)] = max(sum(classDec{iFrame},2));   

            %% If decision is not unanimous, default to no motion
            if numDec(iFrame) ~= (length(activeClasses)-1)
                prPredict(iFrame) = length(activeClasses);
            end
        end
        prPredict = activeClasses(prPredict)';

    otherwise
        error('Invalid Classifier Type Specified');
end

classErr = zeros(1,length(activeClasses));

if settings.enableMV
    prMotion = majority2(prPredict,settings.numMV,length(activeClasses));       % calculate new predictions based on majority voting
    prPredict = prMotion';                                                % copy to new array of predicted values
end

for i = 1:length(activeClasses)
    if Data(activeClasses(i)).testReps
        classErr(i) = mean(prPredict(activeClasses(testTargets)==activeClasses(i)) ~= activeClasses(i));
    else
        classErr(i) = -1;
    end
end

confMatrix = zeros(length(activeClasses),length(activeClasses));
try
    for i=1:length(activeClasses)
        for j=1:length(activeClasses)
            confMatrix(i,j) = sum(activeClasses(i)==prPredict(activeClasses(testTargets)==activeClasses(j)));
        end
    end
catch
end

averageError = sprintf('%0.1f',100*mean(prPredict ~= activeClasses(testTargets)'));
averageFAR = sprintf('%0.1f',100*mean(prPredict(prPredict~=aceInit.restClass)~=activeClasses(testTargets(prPredict~=aceInit.restClass))'));

disp([classifier.classifierType ' Average Error: ' averageError]);
disp([classifier.classifierType ' Average FAR: ' averageFAR]);
disp(' ');

try
    close(waitHandle);   
catch
end
